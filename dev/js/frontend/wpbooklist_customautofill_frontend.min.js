/**
 * JavaScript Admin Functions - wpbooklist-customautofill-frontend.min.js
 *
 * @author   Jake Evans
 * @category JavaScript
 * @package  Includes/Assets/Js
 * @version  6.0.0
 */

// All functions wrapped in jQuery(document ).ready()...
jQuery( document ).ready( function( $ ) {
	'use strict';

	/* BEGINNING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function to insert button that allows user to auto-fill based on ISBN
	wpbooklistCustomAutofillInsertButton();

	// Function to enable the insert button that allows user to auto-fill based on ISBN, once an ISBN is provided.
	wpbooklistCustomAutofillEnableInsertButton();

	// Function to grab book info based on provided isbn.
	wpbooklistCustomAutofillGetBookData();

	// Function for handling the clicks of the Custom Search links and directing to the search page
	customSearchClicks();

	// Function for handling the entry and submission of the Custom Search bar and directing to the search page.
	customSearchBarSubmit();

	// Function for handling the checkbox checks on the custom search sidebar.
	customSearchSidebarCheckboxes();

	// Function for handling the submission of the custom search sidebar.
	customSearchSidebarSubmission();

	// Function for handling the *form* submission of the custom search sidebar.
	customSearchSidebarFormSubmission();

	// Function for populating the search sidebar settings based on url params.
	customSearchSidebarPopulate();

	// Function for clearing checkboxes when a min or max amount is input.
	customSearchSidebarMinMax();

	/* ENDING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function for handling the checkbox checks on the custom search sidebar.
	function customSearchSidebarCheckboxes(){

		$( document ).on( 'change', '.jre-customsearch-sidebar-price-selections-row-checkbox input[type="checkbox"]', function( event ) {

			if ( $( this ).prop( 'checked' ) ) {
				$( '.jre-customsearch-sidebar-price-selections-row-checkbox input[type="checkbox"]' ).removeAttr( 'checked' );
				$( this ).prop( 'checked', true );

				$( '#jre-customsearch-sidebar-price-custommin' ).val( '' );
				$( '#jre-customsearch-sidebar-price-custommax' ).val( '' );
			}

		});	
	}

	// Function for clearing checkboxes when a min or max amount is input.
	function customSearchSidebarMinMax(){

		$( document ).on( 'change', '#jre-customsearch-sidebar-price-custommin, #jre-customsearch-sidebar-price-custommax', function( event ) {
			if ( '' !== $( this ).val() ) {
				$( '.jre-customsearch-sidebar-price-selections-row-checkbox input[type="checkbox"]' ).removeAttr( 'checked' );
			}
		});

		$( document ).on( 'keyup', '#jre-customsearch-sidebar-price-custommin, #jre-customsearch-sidebar-price-custommax', function( event ) {
			if ( '' !== $( this ).val() ) {
				$( '.jre-customsearch-sidebar-price-selections-row-checkbox input[type="checkbox"]' ).removeAttr( 'checked' );
			}
		});

		$( document ).on( 'paste', '#jre-customsearch-sidebar-price-custommin, #jre-customsearch-sidebar-price-custommax', function( event ) {
			if ( '' !== $( this ).val() ) {
				$( '.jre-customsearch-sidebar-price-selections-row-checkbox input[type="checkbox"]' ).removeAttr( 'checked' );
			}
		});	
	}

	// Little helper function for getting URL params.
	function customSearchGetUrlParameter( name ) {
	    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
	    var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
	    var results = regex.exec(location.search);
	    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
	};

	// Function for populating the search sidebar settings based on url params.
	function customSearchSidebarPopulate(){

		if ( -1 < window.location.href.indexOf( 'wrls_search_in' ) ) {

			if ( -1 < window.location.href.indexOf( 'under10' ) ) {
				$( '#jre-customsearch-sidebar-price-under10' ).prop( 'checked', true );
			}

			if ( -1 < window.location.href.indexOf( 'p10to25' ) ) {
				$( '#jre-customsearch-sidebar-price-10to25' ).prop( 'checked', true );
			}

			if ( -1 < window.location.href.indexOf( 'p25to50' ) ) {
				$( '#jre-customsearch-sidebar-price-25to50' ).prop( 'checked', true );
			}

			if ( -1 < window.location.href.indexOf( 'p50andup' ) ) {
				$( '#jre-customsearch-sidebar-price-50andup' ).prop( 'checked', true );
			}

			if ( -1 < window.location.href.indexOf( 'pmin' ) ) {
				$( '#jre-customsearch-sidebar-price-custommin' ).val( customSearchGetUrlParameter('pmin') );
			}

			if ( -1 < window.location.href.indexOf( 'pmax' ) ) {
				$( '#jre-customsearch-sidebar-price-custommax' ).val( customSearchGetUrlParameter('pmax') );
			}

			if ( -1 < window.location.href.indexOf( 'refinegrade' ) ) {
				$( '#jre-customsearch-sidebar-grade-selection-actual' ).val( customSearchGetUrlParameter('refinegrade') );
			}

			if ( -1 < window.location.href.indexOf( 'refinesubject' ) ) {
				$( '#jre-customsearch-sidebar-subject-selection-actual' ).val( customSearchGetUrlParameter('refinesubject') );
			}

			if ( -1 < window.location.href.indexOf( 'refinecur' ) ) {
				$( '#jre-customsearch-sidebar-curricula-selection-actual' ).val( customSearchGetUrlParameter('refinecur') );
			}
		}
	}


	// Function for handling the submission of the custom search sidebar.
	function customSearchSidebarSubmission(){

		$( document ).on( 'click', '#jre-customsearch-sidebar-submit-button', function( event ) {

			console.log('refine clicked!');

			var under10checkbox = $( '#jre-customsearch-sidebar-price-under10' ).prop( 'checked' );
			var p10to25 = $( '#jre-customsearch-sidebar-price-10to25' ).prop( 'checked' );
			var p25to50 = $( '#jre-customsearch-sidebar-price-25to50' ).prop( 'checked' );
			var p50andup = $( '#jre-customsearch-sidebar-price-50andup' ).prop( 'checked' );
			var min = $( '#jre-customsearch-sidebar-price-custommin' ).val();
			var max = $( '#jre-customsearch-sidebar-price-custommax' ).val();
			var grade = $( '#jre-customsearch-sidebar-grade-selection-actual' ).val();
			var subject = $( '#jre-customsearch-sidebar-subject-selection-actual' ).val();
			var curricula = $( '#jre-customsearch-sidebar-curricula-selection-actual' ).val();
			var paramstring = '';
			var newUrl = '';

			var currentURL = document.location.href;

			if ( -1 < window.location.href.indexOf( 'wrls_search_in' ) ) {

				currentURL = currentURL.split( '&' );


				if ( under10checkbox ) {
					paramstring = paramstring + 'under10&';
				}

				if ( p10to25 ) {
					paramstring = paramstring + 'p10to25&';
				}

				if ( p25to50 ) {
					paramstring = paramstring + 'p25to50&';
				}

				if ( p50andup ) {
					paramstring = paramstring + 'p50andup&';
				}

				if ( '' !== min && null !== min && '' !== max && null !== max ) {
					paramstring = paramstring + 'pmin=' + min + '&';
				}

				if ( '' !== max && null !== max && '' !== min && null !== min ) {
					paramstring = paramstring + 'pmax=' + max + '&';
				}

				if ( '' !== grade && null !== grade ) {
					paramstring = paramstring + 'refinegrade=' + grade + '&';
				}

				if ( '' !== subject && null !== subject ) {
					paramstring = paramstring + 'refinesubject=' + subject + '&';
				}

				if ( '' !== curricula && null !== curricula ) {
					paramstring = paramstring + 'refinecur=' + curricula + '&';
				}

				newUrl = currentURL[0] + '&' + currentURL[1] + '&' + currentURL[2] + '&' + encodeURI( paramstring );

				// Remove trailing &.
				if ( '&' === newUrl[newUrl.length -1] ) {
					newUrl = newUrl.slice( 0, -1 );
				}

				window.location.href = newUrl;
			}
		});	
	}

	// Function for handling the *form* submission of the custom search sidebar.
	function customSearchSidebarFormSubmission(){

		$( document ).on( 'submit', '#jre-customsearch-sidebar-submit-form', function( event ) {

			var under10checkbox = $( '#jre-customsearch-sidebar-price-under10' ).prop( 'checked' );
			var p10to25 = $( '#jre-customsearch-sidebar-price-10to25' ).prop( 'checked' );
			var p25to50 = $( '#jre-customsearch-sidebar-price-25to50' ).prop( 'checked' );
			var p50andup = $( '#jre-customsearch-sidebar-price-50andup' ).prop( 'checked' );
			var min = $( '#jre-customsearch-sidebar-price-custommin' ).val();
			var max = $( '#jre-customsearch-sidebar-price-custommax' ).val();
			var grade = $( '#jre-customsearch-sidebar-grade-selection-actual' ).val();
			var subject = $( '#jre-customsearch-sidebar-subject-selection-actual' ).val();
			var curricula = $( '#jre-customsearch-sidebar-curricula-selection-actual' ).val();
			var paramstring = '';
			var newUrl = '';

			var currentURL = document.location.href;

			if ( -1 < window.location.href.indexOf( 'wrls_search_in' ) ) {

				currentURL = currentURL.split( '&' );


				if ( under10checkbox ) {
					paramstring = paramstring + 'under10&';
				}

				if ( p10to25 ) {
					paramstring = paramstring + 'p10to25&';
				}

				if ( p25to50 ) {
					paramstring = paramstring + 'p25to50&';
				}

				if ( p50andup ) {
					paramstring = paramstring + 'p50andup&';
				}

				if ( '' !== min && null !== min && '' !== max && null !== max ) {
					paramstring = paramstring + 'pmin=' + min + '&';
				}

				if ( '' !== max && null !== max && '' !== min && null !== min ) {
					paramstring = paramstring + 'pmax=' + max + '&';
				}

				if ( '' !== grade && null !== grade ) {
					paramstring = paramstring + 'refinegrade=' + grade + '&';
				}

				if ( '' !== subject && null !== subject ) {
					paramstring = paramstring + 'refinesubject=' + subject + '&';
				}

				if ( '' !== curricula && null !== curricula ) {
					paramstring = paramstring + 'refinecur=' + curricula + '&';
				}


				newUrl = currentURL[0] + '&' + currentURL[1] + '&' + currentURL[2] + '&' + encodeURI( paramstring );

				// Remove trailing &.
				if ( '&' === newUrl[newUrl.length -1] ) {
					newUrl = newUrl.slice( 0, -1 );
				}

				window.location.href = newUrl;
			}

			event.preventDefault ? event.preventDefault() : event.returnValue = false;

		});	
	}







	// Function for handling the clicks of the Custom Search links and directing to the search page
	function customSearchClicks(){

		if ( -1 < window.location.href.indexOf( '/search' ) ) {

			$( document ).on( 'click', '.jre-customsearch-browse-grid-item-entry-indiv', function( event ) {
				
				var searchterm = $( this ).text();

				// remove elipses if exists.
				if ( -1 < searchterm.indexOf( '...' ) ) {
					searchterm = searchterm.replace( '...', '' );
				}

				window.location.href = 'https://hootbookrevival.com/?post_type=product&wrls_search_in=title%2Cdescription%2Ccontent%2Csku&s=' + encodeURI( searchterm )
			});	

		}
	}

	// Function for handling the entry and submission of the Custom Search bar and directing to the search page.
	function customSearchBarSubmit(){

		if ( -1 < window.location.href.indexOf( '/search' ) ) {

			// Clear the placeholder text in the input.
			$( document ).on( 'click', '#jre-customsearch-input-actual', function( event ) {
				$( this ).val( '' );
			});

			// For handling someone pressing the Enter key instead of clicking on the magnifying glass image.
			$( document ).on( 'submit', '#jre-customsearch-input-form', function( event ) {
				
				var searchterm = $( '#jre-customsearch-input-actual' ).val();

				window.location.href = 'https://hootbookrevival.com/?post_type=product&wrls_search_in=title%2Cdescription%2Ccontent%2Csku&s=' + encodeURI( searchterm );

				event.preventDefault ? event.preventDefault() : event.returnValue = false;
			});	

			// For handling someone clicking on the magnifying glass image.
			$( document ).on( 'click', '.jre-customsearch-go', function( event ) {
				
				var searchterm = $( '#jre-customsearch-input-actual' ).val();

				window.location.href = 'https://hootbookrevival.com/?post_type=product&wrls_search_in=title%2Cdescription%2Ccontent%2Csku&s=' + encodeURI( searchterm )
			});	

		}
	}



	// Function to insert button that allows user to auto-fill based on ISBN
	function wpbooklistCustomAutofillInsertButton(){

		var buttonHtml = '<div id="wpbooklist-customautofill-html-insertion-wrapper"><input type="submit" value="Search for Book" id="wpbooklist-customautofill-button-id" class="wcv-button wpbooklist-customautofill-button"/></div>';

		if ( -1 < window.location.href.indexOf( '/hoot-vendor-dashboard/product/simple/edit/' ) ) {
			$( '.control' ).first().append( buttonHtml );
		}
	}

	// Function to enable the insert button that allows user to auto-fill based on ISBN, once an ISBN is provided.
	function wpbooklistCustomAutofillEnableInsertButton(){

		if ( -1 < window.location.href.indexOf( '/hoot-vendor-dashboard/product/simple/edit/' ) ) {

			// On keyup...
			$( '#wcv_custom_product_isbn' ).on( 'keyup change paste drop', function( event ) {

				var _this = this;

				setTimeout(function() {

					// Get current input value.
					var currentVal = $( _this ).val();

					// If there are dashes in input, remove them.
					if ( -1 < currentVal.indexOf( '-' ) ) {
						$( _this ).val( currentVal.replace( /-/g, '' ) );
					}

					// If the input is at least 10 characters...
					if ( 10 <= currentVal.length ) {

						$( '#wpbooklist-customautofill-button-id' ).animate({
							'opacity': '1'
						}, {
							queue: false,
							duration: 100,
							complete: function() {
								$( this ).css({'pointer-events':'all'});
							}
						});

					} else {

						$( '#wpbooklist-customautofill-button-id' ).animate({
							'opacity': '0.3'
						}, {
							queue: false,
							duration: 100,
							complete: function() {
								$( this ).css({'pointer-events':'none'});
							}
						});
					}
				}, 0); //this timeout is necessary to get the value
			});
		}
	}


	// Function to grab book info based on provided isbn
	function wpbooklistCustomAutofillGetBookData(){

		var isbn = '';
		var data = [];
		var request = '';
		var description = '';
		var doc = '';
		var thumbnailpath = ''
		var imgtitle = ''
		var responsehtml = '';
		var boxShadow = 'rgb(120, 170, 58) 0px 0px 1px 2px';

		if ( -1 < window.location.href.indexOf( '/hoot-vendor-dashboard/product/simple/edit/' ) ) {

			$( document ).on( 'click', '#wpbooklist-customautofill-button-id', function( event ) {


				// Reset Everything!
				$( '#post_title' ).val( '' );
				$( '#post_title' ).css({'box-shadow': 'none'});
				$( '#wcv_custom_product_author' ).val( '' );
				$( '#wcv_custom_product_author' ).css({'box-shadow': 'none'});
				$( '#wcv_custom_product_publisher' ).val( '' );
				$( '#wcv_custom_product_publisher' ).css({'box-shadow': 'none'});
				$( '#wcv_custom_product_edition' ).val( '' );
				$( '#wcv_custom_product_edition' ).css({'box-shadow': 'none'});
				$( '#wcv_custom_product_subject' ).val( '' );
				$( '#wcv_custom_product_subject' ).css({'box-shadow': 'none'});
				$( '#post_content' ).val( '' );
				$( '#post_content' ).css({'box-shadow': 'none'});
				$( '#_regular_price' ).val( '' );
				$( '#_regular_price' ).css({'box-shadow': 'none'});
				$( 'label[for="_regular_price"]' ).text( 'Regular Price ($)' );

				$( '.wcv-featuredimg' ).empty();
				
				$( '#_featured_image_id' ).val( '' );

				$( '.wpbooklist-customautofill-response' ).animate({
					'opacity': '0'
				}, {
					queue: false,
					duration: 500,
					complete: function() {
						$( this ).remove();
					}
				});

				$( '.pageloader, .wr-loader-3' ).css({'display': 'block'});

				isbn = $( '#wcv_custom_product_isbn' ).val();
				isbn = isbn.replace( / /g, '' );

				data = {
					'action': 'wpbooklist_customautofill_get_book_action',
					'isbn': isbn,
					'security': wpbooklistCustomAutofillPhpVariables.adminnonce1
				};


				request = $.ajax({
					url: ajaxurl,
					type: 'POST',
					data: data,
					timeout: 0,
					success: function( response ) {

						response = JSON.parse( response );

						console.log(response);

						if( 0 !== response) {


							if ( '' !== response.title && null !== response.title && undefined !== response.title ) {
								$( '#post_title' ).val( response.title );
								$( '#post_title' ).css({'box-shadow': boxShadow})
							}

							if ( '' !== response.author && null !== response.author && undefined !== response.author ) {
								$( '#wcv_custom_product_author' ).val( response.author );
								$( '#wcv_custom_product_author' ).css({'box-shadow': boxShadow})
							}

							if ( '' !== response.publisher && null !== response.publisher && undefined !== response.publisher ) {
								$( '#wcv_custom_product_publisher' ).val( response.publisher );
								$( '#wcv_custom_product_publisher' ).css({'box-shadow': boxShadow})
							}

							if ( '' !== response.edition && null !== response.edition  && undefined !== response.edition  ) {
								$( '#wcv_custom_product_edition' ).val( response.title );
								$( '#wcv_custom_product_edition' ).css({'box-shadow': boxShadow})
							}

							if ( '' !== response.category && null !== response.category  && undefined !== response.category  ) {
								$( '#wcv_custom_product_subject' ).val( response.title );
								$( '#wcv_custom_product_subject' ).css({'box-shadow': boxShadow})
							}

							if ( '' !== response.lowestusedprice && null !== response.lowestusedprice  && undefined !== response.lowestusedprice  ) {
								$( '#_regular_price' ).val( response.lowestusedprice.replace( '$', '' ) );
								$( 'label[for="_regular_price"]' ).html( $( 'label[for="_regular_price"]' ).text() + ' <span class="wpbooklist-customautofill-response" id="wpbooklist-customautofill-suggested-price-response">Suggested Price is ' + response.lowestusedprice.replace( '$', '' ) + '</span>');
								$( '#_regular_price' ).css({'box-shadow': boxShadow});

							}

							if ( '' !== response.description && null !== response.description  && undefined !== response.description  ) {
							
								// Strip all HTML from Description and replace double spaces.
		 						doc = new DOMParser().parseFromString( response.description, 'text/html');
		   						description = doc.body.textContent || "";
		   						description = description.replace( /  /g, ' ' );

		   						$( '#post_content' ).val( description );
		   						$( '#post_content' ).css({'box-shadow': boxShadow});

	   						}

	   						thumbnailpath = response.image_attach_data.file.substring( 0, response.image_attach_data.file.lastIndexOf(".") );
	   						imgtitle = response.image_attach_data.file.substring( response.image_attach_data.file.lastIndexOf(".") + 1 );

	   						$( '.wcv-featuredimg' ).html( '<img src="http://hootbookrevival.com/wp-content/uploads/'+thumbnailpath+'-150x150.jpg" alt="" title="'+imgtitle+'" style="max-width: 100%;">' )
							
							$( '#_featured_image_id' ).val( response.image_attachment_id );


							responsehtml = '<p class="wpbooklist-customautofill-response" id="wpbooklist-customautofill-response-success"><span id="wpbooklist-customautofill-response-success-span">Success!</span> Review the Book Information below for accuracy.<br/>Fields highlighted in Green have been auto-filled.</p>';
							$( '#wpbooklist-customautofill-html-insertion-wrapper' ).append( responsehtml );

						} else {

							responsehtml = '<p class="wpbooklist-customautofill-response" id="wpbooklist-customautofill-response-fail"><span id="wpbooklist-customautofill-response-fail-span">Uh-Oh!</span> We couldn\'t retrieve information for this title.<br/>Please enter the information for this title manually or try again.</p>';
							$( '#wpbooklist-customautofill-html-insertion-wrapper' ).append( responsehtml );

						}

						$( '.pageloader, .wr-loader-3' ).css({'display': 'none'});
						
					},
					error: function( jqXHR, textStatus, errorThrown ) {
						
						console.log( errorThrown );
						console.log( textStatus );
						console.log( jqXHR );
					}
				});

				event.preventDefault ? event.preventDefault() : event.returnValue = false;

			});

		}
	}





});
